openapi: 3.0.1
info:
  title: Course Manager
  description: The `course-manager` service facilitates creating a new course and registiring students to it.
  version: 1.0.0
servers:
  - url: http://localhost:8000/v1
    description: Local development server.
tags:
  - name: course
    description: |
      The `course-manager` service should be used to create, update and delete a course.
paths:
  /createCourse:
    post:
      tags:
        - course
      summary: Add a new course
      requestBody:
        description: Request body for constituting a course
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course:
                  $ref: '#/components/schemas/NewCourse'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Bad request.
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          $ref: '#/components/responses/notFound'
        500:
          description: Unexpected error.
  /getCourse/{courseUUID}:
    get:
      tags:
        - course
      summary: Retrieve a course
      parameters:
        - $ref: '#/components/parameters/uuid'
      responses:
        200:
          description: Details of the requested course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Bad request.
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          $ref: '#/components/responses/notFound'
        500:
          description: Unexpected error.
  /listCourses:
    get:
      tags:
        - course
      summary: List all courses
      responses:
        200:
          description: Listing details of the all courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        400:
          description: Bad request.
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          $ref: '#/components/responses/notFound'
        500:
          description: Unexpected error.
  /registerStudent/{courseUUID}:
    put:
      tags:
        - course
      parameters:
        - $ref: '#/components/parameters/uuid'
      summary: Registers a student to a course
      requestBody:
        description: Details of the student
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                student:
                  $ref: '#/components/schemas/Student'
      responses:
        204:
          description: Registered
        400:
          description: Bad request.
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          $ref: '#/components/responses/notFound'
        500:
          description: Unexpected error.
  /unregisterStudent/{courseUUID}:
    put:
      tags:
        - course
      parameters:
        - $ref: '#/components/parameters/uuid'
      summary: Deletes a student from a course
      requestBody:
        description: UUID of the student
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                studentUUID:
                  $ref: '#/components/schemas/uuid'
      responses:
        204:
          description: Student has been deleted from the course
        400:
          description: Bad request.
        401:
          $ref: '#/components/responses/unauthorized'
        404:
          $ref: '#/components/responses/notFound'
        500:
          description: Unexpected error.
components:
  parameters:
    uuid:
      name: courseUUID
      description: Course UUID
      in: path
      required: true
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
        example: '5d61cbc8-9ccd-4348-a623-d61dd7658dd7'
  schemas:
    stringRequired:
      type: string
      required: true
    uuid:
      type: string
      format: uuid
    uuidRequired:
      type: string
      format: uuid
      required: true
    Student:
      type: object
      properties:
        name:
          type: string
          required: true
          example: Alice
        lastname:
          type: string
          required: true
          example: Smith
        uuid:
          $ref: '#/components/schemas/uuidRequired'
        faculty:
          type: string
          required: true
          example: Computer Science
    Tutor:
      type: object
      properties:
        name:
          type: string
          required: true
          example: John
        lastname:
          type: string
          required: true
          example: Stone
        uuid:
          $ref: '#/components/schemas/uuidRequired'
        faculty:
          type: string
          required: true
          example: Computer Science
        lecturerOf:
          type: string
          required: true
          example: Golang
    NewCourse:
      type: object
      properties:
        name:
          type: string
          required: true
          example: Microservices with Go
        tutor:
          $ref: '#/components/schemas/Tutor'
    Course:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/uuidRequired'
        name:
          type: string
          required: true
          example: Microservices with Go
        tutor:
          $ref: '#/components/schemas/Tutor'
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
    error:
      type: object
      properties:
        status:
          type: integer
          description: The status code of the error.
        error:
          type: string
          description: A title for the error response.
  responses:
    notFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
